using System.Collections.Generic;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

public class NoInliningVisitor : BaseCodeSyntaxRewriter {
	private List<CodeSyntaxModel> codeSyntaxes = new List<CodeSyntaxModel>();

	/// <summary>
	/// Initializes a new instance of the <see cref="NoInliningVisitor"/> class.
	/// </summary>
	/// <autogeneratedoc />
	public NoInliningVisitor(SemanticModel semanticModel) : base(semanticModel) {
		ClearCodeSyntax();
	}
	public List<CodeSyntaxModel> GetCodeSyntaxes() {
		if (codeSyntaxes == null)
			codeSyntaxes = new List<CodeSyntaxModel>();
		return codeSyntaxes;
	}

	public void ClearCodeSyntax() {
		codeSyntaxes = new List<CodeSyntaxModel>();
	}
	private void AddCodeSyntax(CodeSyntaxModel value) {
		GetCodeSyntaxes().Add(value);
	}

	private void AddCodeSyntax<T>(T node) where T : SyntaxNode {
		//MemberDeclarationSyntax
		SyntaxToken? Identifier = null;
		SyntaxTokenList? Modifiers = null;
		SyntaxNodeType nodeType = SyntaxNodeType.None;
		SyntaxList<AttributeListSyntax>? AttributeLists = null;

		string ReturnType = "";

		if (node is MethodDeclarationSyntax method) {
			nodeType = SyntaxNodeType.Method;
			Identifier = method.Identifier;
			Modifiers = method.Modifiers;
			AttributeLists = method.AttributeLists;
			ReturnType = method.ReturnType.ToFullString();


		} else if (node is ConstructorDeclarationSyntax constructor) {
			nodeType = SyntaxNodeType.Constructor;
			Identifier = constructor.Identifier;
			Modifiers = constructor.Modifiers;
			AttributeLists = constructor.AttributeLists;

		} else if (node is PropertyDeclarationSyntax property) {
			nodeType = SyntaxNodeType.Property;
			Identifier = property.Identifier;
			Modifiers = property.Modifiers;
			AttributeLists = property.AttributeLists;
			ReturnType = property.Type.ToFullString();
		}
		if (Identifier.HasValue) {
			var model = new CodeSyntaxModel(Identifier.Value.ValueText, nodeType, AttributeLists.HasValue ? HasAttribute(AttributeLists.Value, "MethodImpl") : false, IsTopLevelMember(node)) { FullString = Identifier.Value.ToFullString(), Text = Identifier.Value.Text, Modifier = Modifiers.HasValue ? Modifiers.Value.ToFullString() : null, ReturnType = ReturnType };
			GetCodeSyntaxes().Add(model);
		}
	}



	/// <summary>
	/// Visits the method declaration.
	/// </summary>
	/// <param name="node">The node.</param>
	/// <returns></returns>
	/// <autogeneratedoc />
	public override SyntaxNode VisitMethodDeclaration(MethodDeclarationSyntax node) {
		if (IsTypeDeclaration(node))
			AddCodeSyntax(node);
		return base.VisitMethodDeclaration(node);
	}
	public override SyntaxNode VisitConstructorDeclaration(ConstructorDeclarationSyntax node) {
		if (IsTypeDeclaration(node))
			AddCodeSyntax(node);

		return base.VisitConstructorDeclaration(node);


	}

	public override SyntaxNode VisitAccessorDeclaration(AccessorDeclarationSyntax node) {

		if (HasBody(node) && IsPropertyDeclaration(node, out PropertyDeclarationSyntax property)) {
			AddCodeSyntax(property);
		}
		return base.VisitAccessorDeclaration(node);
	}





}
